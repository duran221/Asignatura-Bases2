				Trigger- Desencadenadores- Disparos:


Objeto procedimental asociado a una tabla.


se ejecutan cuando ocurre un evento DML: Actualizacion
Un disparo apunta a una unica tabla: Una tabla puede tener multiples disparos.
 
*Los disparos no se invocan.
*ejecutar labores de integridad complejas
*control de auditorias sobre las tablas
*para llevar estadistica puntual sobre la base de datos
*se ejecutan implicitamente


			Orden o sentencia:
Los disparos tipo order se ejecutan sólo una vez por cada sentencia


			For each row:
Disparador de fila. se ejecuta sólo una vez por cada fila afectada.



				Tienen un temporizador:

*BEFORE (Antes)

*AFTER(Despues)


De un evento DML: (insert-update-delete):

Objeto sobre el cual se implementa: Tabla.


Estructura:

CREATE OR REPLACE TRIGGER NOMBRE
BEFORE|AFTER insert or delete or update or update
			of columna ON NOMBRETABLA;

--Aparece sólo si el disparo es for each row
[FOR EARCH ROW]

--supongamos que el disparo se va a activar solo cuando se altere

DECLARE


BEGIN


EXCEPTION


END NOMBRE;





 

los disparos order se usan cuando vamos a manejar consolidados de informacion con estadisticas.
Funciones de agregacion
usados para formas de auditoria. Porque está evaluando el comportamiento de cada registro


Order: Usados para un todo.


			Ejercicio:



--El disparo debe de mantener una estadistica:
--Debe ejecutarse despues de ejecutarse una modificacion o actualizacion
--Debo realizarlo sobre todas las operaciones
--se usa porque vamos a usar estadisticas

create or replace TRIGGER EstadisticaEspecialidad
AFTER INSERT OR DELETE OR UPDATE ON Estudiantes

DECLARE
    
    CURSOR MIC IS
        SELECT InitCap(ESPECIALIDAD) AS ESPE, SUM(CREDITOS) AS SUMAC, COUNT(*) AS CUANTOS
        FROM ESTUDIANTES
        GROUP BY ESPECIALIDAD
        ORDER BY 1;

BEGIN

    FOR I IN MIC
    LOOP
        UPDATE ESPECIALIDADES
            SET TOTALCREDITOS= I.SUMAC,
            TOTALESTUDIANTES= I.CUANTOS
        WHERE InitCap(ESPECIALIDAD)= I.ESPE;

        IF SQL%NOTFOUND THEN
            INSERT INTO ESPECIALIDADES
            VALUES(I.ESPE, I.SUMAC, I.CUANTOS);

        END IF;

    END LOOP;


END EstadisticaEspecialidad;




UPDATE ESTUDIANTES SET CREDITOS=CREDITOS-1
WHERE CREDITOS>=5;

SELECT * FROM ESPECIALIDADES;

DELETE FROM ESTUDIANTES WHERE ID NOT IN(SELECT DISTICT(IDESTUDIANTES) FROM MATRICULAS);



Realizar un diparo por cada vocal mantenga cuantos alumnos están matriculados cuyo nombre empiece por la 'A' 'E' 'I'
estadistica y el porcentaje frente a todos los matriculados con un decimal.




Vocal			Cuantos		Porcentaje:
'A'			10		12.1%
'E'			12		13.1%
'I'			11		10.1%




Tarea: 




			A				E			I			O				U

Computacion		12				2			1			3				4	
Nutricion
MuSica



Leer for each row, que Significa un error de mutacion.



Una tabla puede tener maximo 12 diSparoS.










SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER CONSOLIDADO
AFTER INSERT OR DELETE OR UPDATE ON MATRICULAS

DECLARE

    CANTIDAD_A NUMBER:=0;
    CANTIDAD_E NUMBER:=0;
    CANTIDAD_I NUMBER:=0;
    TOTAL NUMBER:=0;
    PORCENTAJE NUMBER:=0;

BEGIN
    
    SELECT COUNT(DISTINCT(ID)) INTO TOTAL FROM MATRICULAS
    MAT JOIN ESTUDIANTES EST ON MAT.IDESTUDIANTE=EST.ID;

    SELECT COUNT(DISTINCT(ID)) INTO CANTIDAD_A FROM MATRICULAS
    MAT JOIN ESTUDIANTES EST ON MAT.IDESTUDIANTE=EST.ID
    WHERE SUBSTR(UPPER(NOMBRE),1,1)='A';
    
    SELECT COUNT(DISTINCT(ID)) INTO CANTIDAD_E FROM MATRICULAS
    MAT JOIN ESTUDIANTES EST ON MAT.IDESTUDIANTE=EST.ID
    WHERE SUBSTR(UPPER(NOMBRE),1,1)='E';
    
    SELECT COUNT(DISTINCT(ID)) INTO CANTIDAD_I FROM MATRICULAS
    MAT JOIN ESTUDIANTES EST ON MAT.IDESTUDIANTE=EST.ID
    WHERE SUBSTR(UPPER(NOMBRE),1,1)='I';
    
    DBMS_OUTPUT.PUT_LINE('Vocal     Cuanto          Porcentaje');
    PORCENTAJE:= ROUND((CANTIDAD_A*100)/TOTAL,1);
    DBMS_OUTPUT.PUT_LINE('A     ' || CANTIDAD_A ||'     '||PORCENTAJE );
    PORCENTAJE:= ROUND((CANTIDAD_E*100)/TOTAL,1);
    DBMS_OUTPUT.PUT_LINE('E     ' || CANTIDAD_E ||'     '||PORCENTAJE );
    PORCENTAJE:= ROUND((CANTIDAD_I*100)/TOTAL,1);
    DBMS_OUTPUT.PUT_LINE('I     ' || CANTIDAD_I ||'     '||PORCENTAJE );
END CONSOLIDADO;
/
SHOW ERRORS;


SELECT
    *
FROM MATRICULAS

INSERT INTO MATRICULAS VALUES(123,'CTS',102,'A');